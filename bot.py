import os
import asyncio
import math
from typing import List, Tuple, Dict

import aiohttp
from datetime import datetime, timezone

# ============ CONFIG ============
# –¢–∞–π–º—Ñ—Ä–µ–π–º—ã: 4H –∏ 1D
TF_LIST = ["240", "D"]                   # 240 = 4H, D = 1D (Bybit —Ñ–æ—Ä–º–∞—Ç)
TF_LABEL = {"240": "4H", "D": "1D"}

# DeMarker
DEM_LEN = 28
OB = 0.70
OS = 0.30

# –°–ø–∏—Å–æ–∫ –∏–∑ ~30 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤ (USDT)
SYMS = [
    "BTCUSDT","ETHUSDT","SOLUSDT","BNBUSDT","XRPUSDT","ADAUSDT",
    "DOGEUSDT","TONUSDT","TRXUSDT","LINKUSDT","MATICUSDT","DOTUSDT",
    "AVAXUSDT","SHIBUSDT","LTCUSDT","BCHUSDT","ATOMUSDT","XLMUSDT",
    "APTUSDT","SUIUSDT","ARBUSDT","OPUSDT","NEARUSDT","INJUSDT",
    "RUNEUSDT","AAVEUSDT","EGLDUSDT","FILUSDT","ETCUSDT","UNIUSDT"
]

# Bybit –ø—É–±–ª–∏—á–Ω–æ–µ API (spot-—Ä—ã–Ω–æ–∫; –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∫–ª—é—á–µ–π)
BYBIT_BASE = "https://api.bybit.com"
KLINE_PATH = "/v5/market/kline"          # GET: category=spot&symbol=&interval=&limit=
HTTP_TIMEOUT = 25
REQUEST_CONCURRENCY = 6                  # –ü–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º –∑–∞–ø—Ä–æ—Å–æ–≤
JOB_EVERY_SECONDS = 300                  # –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

# Telegram
TG_TOKEN = os.environ.get("TG_BOT_TOKEN", "").strip()
TG_CHAT_ID = os.environ.get("TG_CHAT_ID", "").strip()
assert TG_TOKEN and TG_CHAT_ID, "–ù—É–∂–Ω—ã TG_BOT_TOKEN –∏ TG_CHAT_ID –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."

# =================================

# -------- DeMarker (vector) --------
def demarker(high: List[float], low: List[float], length: int) -> List[float]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∑–Ω–∞—á–µ–Ω–∏–π DeMarker (0..1) —Ç–æ–π –∂–µ –¥–ª–∏–Ω—ã, NaN –≤ –Ω–∞—á–∞–ª–µ."""
    n = len(high)
    if n != len(low) or n == 0:
        return []
    out = [math.nan] * n
    up_buf = [0.0] * n
    dn_buf = [0.0] * n

    for i in range(1, n):
        up = max(high[i] - high[i-1], 0.0)
        dn = max(low[i-1] - low[i], 0.0)
        up_buf[i] = up
        dn_buf[i] = dn

    # —Å–∫–æ–ª—å–∑—è—â–∞—è —Å—É–º–º–∞
    up_sum = 0.0
    dn_sum = 0.0
    for i in range(n):
        up_sum += up_buf[i]
        dn_sum += dn_buf[i]
        if i >= length:
            up_sum -= up_buf[i-length]
            dn_sum -= dn_buf[i-length]
        if i >= length:
            denom = up_sum + dn_sum
            out[i] = (up_sum / denom) if denom > 0 else math.nan
    return out

# -------- Bybit fetch --------
async def fetch_klines(session: aiohttp.ClientSession, symbol: str, tf: str, limit: int = 200) -> List[Tuple[int, float, float, float, float]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç OHLCV –∫–∞–∫ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (ts_ms, open, high, low, close).
    Bybit v5 –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç newest-first -> —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ oldest-first.
    """
    params = {
        "category": "spot",
        "symbol": symbol,
        "interval": tf,
        "limit": str(limit)
    }
    url = BYBIT_BASE + KLINE_PATH
    async with session.get(url, params=params, timeout=HTTP_TIMEOUT) as r:
        if r.status != 200:
            text = await r.text()
            raise RuntimeError(f"HTTP {r.status} {symbol} {tf}: {text}")
        data = await r.json()
    if data.get("retCode") != 0:
        raise RuntimeError(f"Bybit retCode {data.get('retCode')} {symbol} {tf}: {data.get('retMsg')}")
    lst = data["result"]["list"]  # newest first
    lst.reverse()
    # —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∞: [startTime, open, high, low, close, volume, turnover]
    out = []
    for it in lst:
        ts = int(it[0])
        o = float(it[1]); h = float(it[2]); l = float(it[3]); c = float(it[4])
        out.append((ts, o, h, l, c))
    return out

def last_closed_index(arr_len: int) -> int:
    """–ò–Ω–¥–µ–∫—Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –ó–ê–ö–†–´–¢–û–ô —Å–≤–µ—á–∏ (–Ω–µ —Ç–µ–∫—É—â–µ–π)."""
    return max(0, arr_len - 2)

def format_ts(ms: int) -> str:
    return datetime.fromtimestamp(ms/1000, tz=timezone.utc).strftime("%Y-%m-%d %H:%M UTC")

async def scan_once(session: aiohttp.ClientSession) -> Dict[str, Dict[str, float]]:
    """
    –°–∫–∞–Ω–∏—Ä—É–µ—Ç –≤—Å–µ —Ç–∏–∫–µ—Ä—ã –Ω–∞ –æ–±–æ–∏—Ö –¢–§.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å {tf: {symbol: dem_last}} —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Ö, –≥–¥–µ –ø–æ–ø–∞–¥–∞–Ω–∏–µ –≤ –∑–æ–Ω—É.
    """
    results: Dict[str, Dict[str, float]] = {tf: {} for tf in TF_LIST}

    sem = asyncio.Semaphore(REQUEST_CONCURRENCY)

    async def one(symbol: str, tf: str):
        async with sem:
            try:
                kl = await fetch_klines(session, symbol, tf, limit=max(DEM_LEN*3, 120))
                if len(kl) < DEM_LEN + 2:
                    return
                _, _, highs, lows, closes = zip(*[(t,o,h,l,c) for (t,o,h,l,c) in kl])
                de = demarker(list(highs), list(lows), DEM_LEN)
                i = last_closed_index(len(de))
                val = de[i]
                if math.isnan(val):
                    return
                if val >= OB or val <= OS:
                    results[tf][symbol] = val
            except Exception as e:
                # –º–æ–ª—á–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª, —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞–ª –æ–±—â–∏–π —Ü–∏–∫–ª
                pass

    tasks = []
    for tf in TF_LIST:
        for s in SYMS:
            tasks.append(asyncio.create_task(one(s, tf)))
    await asyncio.gather(*tasks)
    return results

# -------- Telegram (–Ω–∞ —á–∏—Å—Ç–æ–º aiohttp) --------
async def tg_send_text(session: aiohttp.ClientSession, text: str):
    url = f"https://api.telegram.org/bot{TG_TOKEN}/sendMessage"
    payload = {"chat_id": TG_CHAT_ID, "text": text, "parse_mode": "HTML", "disable_web_page_preview": True}
    async with session.post(url, json=payload, timeout=HTTP_TIMEOUT) as r:
        await r.text()  # –ø—Ä–æ–≥–ª–∞—Ç—ã–≤–∞–µ–º

async def start_message(session: aiohttp.ClientSession):
    tfs = ", ".join(TF_LABEL[tf] for tf in TF_LIST)
    await tg_send_text(session, f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ú–æ–Ω–∏—Ç–æ—Ä—é 30 —Ç–∏–∫–µ—Ä–æ–≤ (DeMarker {DEM_LEN}) –Ω–∞ {tfs}.\n"
                                f"–ó–æ–Ω—ã: OB ‚â• {OB:.2f}, OS ‚â§ {OS:.2f}. –°–º–æ—Ç—Ä—é –ø–æ—Å–ª–µ–¥–Ω—é—é <u>–∑–∞–∫—Ä—ã—Ç—É—é</u> —Å–≤–µ—á—É.")

def format_hits(hits: Dict[str, Dict[str, float]]) -> str:
    parts = []
    for tf in TF_LIST:
        rows = []
        for sym, v in sorted(hits[tf].items()):
            tag = "üü¢ OS" if v <= OS else "üî¥ OB"
            rows.append(f"{tag} <b>{sym}</b>: {v:.3f}")
        if rows:
            parts.append(f"<b>{TF_LABEL[tf]}</b>\n" + "\n".join(rows))
    return "\n\n".join(parts)

async def worker():
    async with aiohttp.ClientSession() as session:
        await start_message(session)
        while True:
            try:
                hits = await scan_once(session)
                msg = format_hits(hits)
                if msg.strip():
                    await tg_send_text(session, f"üìä –°–∏–≥–Ω–∞–ª—ã DeMarker:\n\n{msg}")
            except Exception as e:
                # –æ—Ç–ø—Ä–∞–≤–∏–º –∫—Ä–∞—Ç–∫—É—é –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ —Å–ø–∞–º–∏–º –¥–µ—Ç–∞–ª—è–º–∏
                try:
                    await tg_send_text(session, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ü–∏–∫–ª–∞: {type(e).__name__}")
                except:
                    pass
            await asyncio.sleep(JOB_EVERY_SECONDS)

if __name__ == "__main__":
    asyncio.run(worker())